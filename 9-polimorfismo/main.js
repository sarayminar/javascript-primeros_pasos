
// üîÄ POLIMORFISMO
// Se trata de la capacidad de un m√©todo para comportarse de diferentes maneras seg√∫n el objeto que lo llame. Esto permite que diferentes clases o funciones usen el mismo nombre de m√©todo pero con implementaciones distintas, facilitando la reutilizaci√≥n y flexibilidad del c√≥digo. 

// ======================
// CABALLERO (SUBCLASE)
// ======================
class Caballero extends Personaje {
    constructor(nombre, fuerza, destreza) {
      super(nombre, fuerza, destreza);
      this.arma = 'espadaPesada'
      
    }
  
    // Polimorfismo
    atacar() {
      const da√±o = this.fuerza * 2;
      return `${this.nombre} blande su ${this.arma} y causa ${da√±o} puntos de da√±o`;
    }
  }

  const caballero = new Caballero("Tony", 15, 8);
  console.log(caballero.atacar());

  const personaje = new Personaje("Rico", 12, 3);
  console.log(personaje.atacar());



// ======================
// MAGO (SUBCLASE)
// ======================
class Mago extends Personaje {
    constructor(nombre, fuerza, destreza, nivelMagia) {
      super(nombre, fuerza, destreza);
      this.nivelMagia = nivelMagia;
      this.hechizos= ["bola de fuego", "ventisca", "electrocutar"];
    }
  
    // M√©todo espec√≠fico del Mago
    
    hechizoAleatorio(){
        return this.hechizos [Math.floor(Math.random() * this.hechizos.length)];
    }
    // Polimorfismo: Atacar usando magia
    atacar() {
      const hechizos = this.hechizoAleatorio();
      const da√±o = this.nivelMagia * 3;
      return `${this.nombre} lanza ${hechizo} y causa ${da√±o} puntos de da√±o magico`
    }
  }


  const mago = new Mago ("Harry", 1000, 3, 20);
  console.log(mago.atacar());
  console.log(mago.atacar());
  console.log(mago.atacar());



// ======================
// P√çCARO (SUBCLASE)
// ======================
class Picaro extends Personaje {
    constructor(nombre, fuerza, destreza) {
      super(nombre, fuerza, destreza);
      this.arma = "daga dual üó°Ô∏è";
    }
  
    // Polimorfismo: Ataque complejo con l√≥gica adicional
    atacar() {
      const baseDa√±o = this.destreza * 2;
      let resultado = `${this.nombre} usa ${this.arma} `;
      
      // Probabilidad de ataque cr√≠tico (30%)
      if (Math.random() < 0.3) {
        const critico = baseDa√±o * 2;
        resultado += `¬°CR√çTICO! ${critico} puntos de da√±o üí•`;
      } 
      // Probabilidad de ataque doble (50%)
      else if (Math.random() < 0.5) {
        resultado += `con doble golpe: ${baseDa√±o} + ${baseDa√±o} = ${baseDa√±o * 2} da√±o ‚ú®`;
      } 
      // Ataque normal
      else {
        resultado += `y causa ${baseDa√±o} puntos de da√±o`;
      }
      
      return resultado;
    }
  }


  const picaro = new Picaro ("Juan", 200, 100);
  console.log(picaro(atacar));